<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CSS on ljzsdut</title><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/</link><description>Recent content in CSS on ljzsdut</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/1-CSS3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/1-CSS3%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</guid><description>基础知识 因为CSS 主要是对页面元素的美化，所以需要先学习 HTML 相关课程。
大部分HTML元素都有系统提供的样式，但有以下问题：
不同浏览器显示样式不一致 样式过于简单，显示效果不美观 很难按照设计稿完全呈现显示效果 样式声明 可以通过多种方式定义样式表。
外部样式 使用 link 标签引入外部样式文件，需要注意以下几点。
link 标签放在 head 标签内部 样式文件要以 .css 为扩展名 一个页面往往需要引入多个样式文件 属性 说明 rel 定义当前文档与被链接文档之间的关系 href 外部样式文件 type 文档类型 link 还有其他属性会在其他章节单独讲解
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;houdunren.css&amp;#34; type=&amp;#34;text/css&amp;#34;&amp;gt; 嵌入样式 使用 style 标签可以在文档内部定义样式规则。
&amp;lt;style&amp;gt; body { background: red; } &amp;lt;/style&amp;gt; 内联样式 可以为某个标签单独设置样式。
&amp;lt;h1 style=&amp;#34;color:green;&amp;#34;&amp;gt;houdunren.com&amp;lt;/h1&amp;gt; 导入样式 使用 @import 可以在原样式规则中导入其他样式表，可以在外部样式、style标签中使用。
导入样式要放在样式规则前面定义。
&amp;lt;style&amp;gt; @import url(&amp;#34;hdcms.css&amp;#34;); body { background: red; } &amp;lt;/style&amp;gt; 其他细节 空白 在样式规则中可以随意使用空白，空白只是看不见但同样占用空间，所以可以结合其他工具如 webpack 等将css 压缩为一行。</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/2-CSS3%E9%80%89%E6%8B%A9%E5%99%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/2-CSS3%E9%80%89%E6%8B%A9%E5%99%A8/</guid><description>选择器 样式是做用在元素标签上的，通过本章将可以随意查找元素来应用样式。
基本选择器 选择器 示例 描述 .class .intro 选择 class=&amp;ldquo;intro&amp;rdquo; 的所有元素 #id #firstname 选择 id=&amp;ldquo;firstname&amp;rdquo; 的所有元素 * * 选择所有元素 element p 选择所有p元素 element,element div,p 选择所有div元素和所有p元素 element element div p 选择div元素内部的所有p元素（后代关系） element&amp;gt;element div&amp;gt;p 选择父元素为div元素的所有p元素（父子关系） element+element div+p 选择紧接在div元素之后的所有p元素（兄弟关系） element1~element2 p~ul 后面兄弟元素：选择p元素后面的所有为ul的兄弟元素 标签选择 使用 * 可为所有元素设置样式。
* { text-decoration: none; color: #6c757d; } 根据标签为元素设置样式
h1 { color: red; } 同时设置多个元素组合
h1,h2 { color: red; } 元素在多个组件中存在
h1,h2 { color: red; } h1,h3{ background: #dcdcdc; } 类选择器 类选择器是为一类状态声明样式规则，下面是把文本居中定义为类样式。</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/3-CSS3%E5%85%83%E7%B4%A0%E6%9D%83%E9%87%8D/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/3-CSS3%E5%85%83%E7%B4%A0%E6%9D%83%E9%87%8D/</guid><description>#元素权重 元素会被多个样式一层层作用，这就是层叠样式表的来源。如果多个样式中冲突的样式做用在元素上就会产生优先级权重问题。
使用类、ID、伪类都有不同的权重，具体应用哪条规则要看权限大小。
相同权重的规则应用最后出现的 可以使用 !important 强制提升某个规则的权限 权重应用 规则 粒度 ID 0100 class，类属性值 0010 标签,伪元素 0001 * 0000 行内样式 1000 下面是ID权限大于CLASS的示例
&amp;lt;style&amp;gt; .color { color: red; } #hot { color: green; } &amp;lt;/style&amp;gt; &amp;lt;h2 class=&amp;#34;color&amp;#34; id=&amp;#34;hot&amp;#34;&amp;gt;HDCMS&amp;lt;/h2&amp;gt; 属性权重的示例
&amp;lt;style&amp;gt; /* 权重:0021 */ h2[class=&amp;#34;color&amp;#34;][id] { color: red; } /* 权重:0012 */ article h2[class=&amp;#34;color&amp;#34;] { color: blue; } &amp;lt;/style&amp;gt; &amp;lt;article&amp;gt; &amp;lt;h2 class=&amp;#34;color&amp;#34; id=&amp;#34;hot&amp;#34;&amp;gt;HDCMS&amp;lt;/h2&amp;gt; &amp;lt;/article&amp;gt; 行级权重优先级最高
&amp;lt;style&amp;gt; /* 权重:0012 */ article h2[class=&amp;#34;color&amp;#34;] { color: blue; } #hot { color: black; } &amp;lt;/style&amp;gt; &amp;lt;h2 class=&amp;#34;color&amp;#34; id=&amp;#34;hot&amp;#34; style=&amp;#34;color:green;&amp;#34;&amp;gt;HDCMS&amp;lt;/h2&amp;gt; 强制优先级 有时在规则冲突时，为了让某个规则强制有效可以使用 !</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/4-CSS3%E6%96%87%E6%9C%AC%E6%8E%A7%E5%88%B6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/4-CSS3%E6%96%87%E6%9C%AC%E6%8E%A7%E5%88%B6/</guid><description>#文本基础 字体设置 可以定义多个字体，系统会依次查找，比如下例中 'Courier New' 字体不存在将使用 Courier 以此类推。
要使用通用字体，比如你电脑里有 后盾人宋体 在你电脑可以正常显示，但不保证在其他用户电脑可以正常，因为他们可能没有这个字体。
font-family: &amp;#39;Courier New&amp;#39;, Courier, monospace; 自定义字体
可以声明自定义字段，如果客户端不存在将下载该字体，使用方式也是通过 font-family 引入。
&amp;lt;style&amp;gt; @font-face { font-family: &amp;#34;houdunren&amp;#34;; src: url(&amp;#34;SourceHanSansSC-Light.otf&amp;#34;) format(&amp;#34;opentype&amp;#34;), url(&amp;#34;SourceHanSansSC-Heavy.otf&amp;#34;) format(&amp;#34;opentype&amp;#34;); } span { font-family: &amp;#39;houdunren&amp;#39;; } &amp;lt;/style&amp;gt; 字体 格式 .otf opentype .woff woff .ttf truetype .eot Embedded-opentype 不建议使用中文字体，因为文件太大且大部分是商业字体。
字重定义 字重指字的粗细定义。取值范围 normal | bold | bolder | lighter | 100 ~900。
400对应 normal,700对应 bold ，一般情况下使用 bold 或 normal 较多。
&amp;lt;style&amp;gt; span { font-weight: bold; } strong:last-child { font-weight: normal; } &amp;lt;/style&amp;gt; .</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/5-CSS3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%9D%A2%E6%8E%8C%E6%8F%A1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/5-CSS3%E7%9B%92%E5%AD%90%E6%A8%A1%E5%9E%8B%E5%85%A8%E9%9D%A2%E6%8E%8C%E6%8F%A1/</guid><description>盒子模型 houdunren.com @ 向军大叔
下而是基本使用示例
&amp;lt;style&amp;gt; a { display: inline-block; border: solid 1px #ddd; text-align: center; padding: 10px 20px; margin-right: 30px; } &amp;lt;/style&amp;gt; ... &amp;lt;a href=&amp;#34;&amp;#34;&amp;gt;MYSQL&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;&amp;#34;&amp;gt;LINUX&amp;lt;/a&amp;gt; &amp;lt;a href=&amp;#34;&amp;#34;&amp;gt;PHP&amp;lt;/a&amp;gt; 外边距 声明定义 边距顺序依次为：上、右、下、左。
&amp;lt;style&amp;gt; main { border: solid 1px red; width: 500px; height: 500px; margin: 0 auto; } h2 { border: solid 2px green; width: 300px; height: 300px; margin: 50px 80px 100px 150px; } &amp;lt;/style&amp;gt; ... &amp;lt;main&amp;gt; &amp;lt;h2&amp;gt;houdunren.com&amp;lt;/h2&amp;gt; &amp;lt;/main&amp;gt; 下例定义上下50px边距，左右80px边距</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/6-CSS3%E8%83%8C%E6%99%AF%E4%B8%8E%E6%B8%90%E5%8F%98/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/6-CSS3%E8%83%8C%E6%99%AF%E4%B8%8E%E6%B8%90%E5%8F%98/</guid><description>背景样式 houdunren.com @ 向军大叔
背景颜色 背景颜色可以使用 rga | rgba | 十六进制 等颜色格式
&amp;lt;style&amp;gt; h2 { background-color: red; } &amp;lt;/style&amp;gt; ... &amp;lt;h2&amp;gt;houdunren.com&amp;lt;/h2&amp;gt; 背景图片 可以使用 png| gif |jpeg 等图片做为背景使用
background-image: url(icon-s.jpg); 背景裁切 background的默认范围=padding+content，不包含border、margin。可以通过background-clip来修改默认行为。
选项 说明 border-box 包括边框 padding-box 不含边框，包括内边距 （默认=padding+content） content-box 内容区域 background-clip: border-box; 背景重复 用于设置背景重复的规则
选项 说明 repeat 水平、垂直重复（默认） repeat-x 水平重复 repeat-y 垂直重复 no-repeat 不重复 space 背景图片对称均匀分布，避免出现半张图 background-repeat: repeat-y 背景滚动 用于设置在页面滚动时的图片处理方式
选项 说明 scroll 背景滚动 fixed 背景固定 background-attachment: fixed; 背景位置 用于设置背景图片的水平、垂直定位。</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/7-CSS3%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%86%85%E5%AE%B9%E6%A0%B7%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/7-CSS3%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%86%85%E5%AE%B9%E6%A0%B7%E5%BC%8F/</guid><description>#表格 表格可以非常快速的部署数据，灵活控制表格样式是必要的。表格不能设置外边距。
定制表格 除了使用 table 标签绘制表格外，也可以使用样式绘制。
样式规则 说明 table 对应 table table-caption 对应 caption table-row 对表 tr table-row-group 对应 tbody table-header-group 对应 thead table-footer-group 对应 tfoot &amp;lt;style&amp;gt; .table { display: table; border: solid 1px #ddd; } .table nav { display: table-caption; text-align: center; background: black; color: white; padding: 10px; } .table section:nth-of-type(1) { font-weight: bold; display: table-header-group; background: #555; color: white; } .table section:nth-of-type(2) { display: table-row-group; } .table section:nth-of-type(3) { display: table-footer-group; background: #f3f3f3; } .</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/8-CSS3%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/8-CSS3%E6%B5%AE%E5%8A%A8%E5%B8%83%E5%B1%80/</guid><description>#浮动布局 float 属性定义元素在哪个方向浮动。以往这个属性总应用于图像，使文本围绕在图像周围，不过在 CSS 中，任何元素都可以浮动。浮动元素会生成一个块级框，而不论它本身是何种元素。
在网站开发中需要一行排列多个元素，使用浮动可以方便实现。下面是使用浮动排列多个元素
FLOAT 使用浮动可以控制相邻元素间的排列关系。
选项 说明 left 向左浮动 right 向右浮动 none 不浮动 #文档流 没有设置浮动的块元素是独占一行的。
浮动是对后面元素的影响，下图中第二个元素设置浮动对第一个元素没有影响
div:first-of-type { border: solid 2px red; } div:last-of-type { float: left; background: green; } 丢失空间 如果只给第一个元素设置浮动，第二个元素不设置，后面的元素会占用第一个元素空间。
div:first-of-type { float: left; border: solid 2px red; } div:last-of-type { background: green; } 使用浮动 两个元素都设置浮动后，会并排显示。
div:first-of-type { float: left; border: solid 2px red; } div:last-of-type { float: left; background: green; } 为第二个元素设置右浮动时将移动到右边
div:first-of-type { float: left; border: solid 2px red; } div:last-of-type { float: right; background: green; } 浮动边界 浮动元素边界不能超过父元素的padding</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/9-CSS3%E5%AE%9A%E4%BD%8D%E5%B8%83%E5%B1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/9-CSS3%E5%AE%9A%E4%BD%8D%E5%B8%83%E5%B1%80/</guid><description>基础知识 定位的基本思想很简单，它允许你定义元素框相对于其正常位置应该出现的位置，或者相对于父元素、另一个元素甚至浏览器窗口本身的位置。
轮播图是典型的定位应用
下面弹出的二维码也可以使用定位处理
下面是抖音软件截图，如果布局类似的页面页面中的图标可以使用定位处理
定位类型 选项 说明 static 默认形为，参考文档流 relative 相对定位 absolute 绝对定位 fixed 固定定位 sticky 粘性定位 位置偏移 可以为部分类型的定位元素设置上、下、左、右 的位置偏移。
选项 说明 top 距离顶边 bottom 距离下边 left 距离左部 right 距离右边 &amp;lt;style&amp;gt;
body {
padding: 50px;
}
article {
width: 300px;
height: 200px;
border: solid 6px blueviolet;
margin: 20px;
}
div {
font-size: 25px;
background: #f2a67d;
padding: 10px;
position: absolute;
top: 0;
}
&amp;lt;/style&amp;gt;
...
&amp;lt;article&amp;gt;
&amp;lt;div&amp;gt;houdunren.com&amp;lt;/div&amp;gt;
&amp;lt;/article&amp;gt; 相对定位 相对定位是相对于元素原来的位置控制，当元素发生位置偏移时，原位置留白。</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/10-CSS3%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/10-CSS3%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/</guid><description>了解弹性 Flex 是 Flexible Box 的缩写，意为&amp;quot;弹性布局&amp;quot;，可以轻松的控制元素排列、对齐和顺序的控制。
现在的终端类型非常多，使用弹性盒模型可以让元素在不同尺寸终端控制尺寸。
兼容性 下面是 FLEX 系统兼容性数据，你也可以在 https://caniuse.com/ (opens new window)网站查看，绝大多数设备尤其是移动端都很好的支持 FLEX，所以可以放心使用。
响应体验 通过下面小米移动端中间区域水平排列元素，来体验一下响应布局带来的便利性。
&amp;lt;style&amp;gt; * { padding: 0; margin: 0; } div.container { display: flex; height: 100vh; justify-content: space-evenly; } div.container div { border: solid 1px #ddd; } div.container div:nth-of-type(1) { min-width: 80px; background: #4E9166; } div.container div:nth-of-type(2) { flex: 1; background: #ddd; } &amp;lt;/style&amp;gt; ... &amp;lt;div class=&amp;#34;container&amp;#34;&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; 布局对比 下面通过微信界面的例子来对比传统布局与弹性布局的不同。
传统布局 &amp;lt;style&amp;gt; * { padding: 0; margin: 0; } main, footer { border: solid 1px #ddd; box-sizing: border-box; } main { background: #ddd; height: 100vh; padding-bottom: 55px; background-clip: content-box; } footer { position: fixed; bottom: 0; left: 0; right: 0; height: 50px; } footer div { width: 33%; float: left; text-align: center; line-height: 3em; height: 100%; background: linear-gradient(to bottom, #f3f3f3, #eee, #f3f3f3); cursor: pointer; } footer div:nth-child(n+2) { border-left: solid 1px #ddd; } &amp;lt;/style&amp;gt; .</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/11-CSS%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/11-CSS%E6%A0%85%E6%A0%BC%E7%B3%BB%E7%BB%9F/</guid><description>栅格介绍 名词解释 CSS 网格布局(Grid Layout) 是 CSS 中最强大的布局系统。 这是一个二维系统，这意味着它可以同时处理列和行。
栅格系统与 FLEX 弹性布局有相似之处理，都是由父容器包含多个项目元素的使用。
兼容性 下面是栅格系统兼容性数据，你也可以在 https://caniuse.com/ (opens new window)网站查看，所以在根据项目使用的场景决定是否使用栅格布局。
基本知识 下面了解栅格有关的元素说明，可以帮助你更好的使用栅格。
声明容器 块级容器 &amp;lt;style&amp;gt; * { padding: 0; margin: 0; } body { padding: 200px; } article { width: 400px; height: 200px; border: solid 5px silver; display: grid; grid-template-rows: 50% 50%; grid-template-columns: 25% 25% 25% 25%; } article div { background: blueviolet; background-clip: content-box; padding: 10px; border: solid 1px #ddd; } &amp;lt;/style&amp;gt; 后盾人 &amp;lt;article&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/article&amp;gt; 行级容器 display: inline-grid; 划分行列 栅格有点类似表格，也 行 和 列。使用 grid-template-columns 规则可划分列数，使用 grid-template-rows 划分行数。</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/12-CSS3%E5%8F%98%E5%BD%A2%E5%8A%A8%E7%94%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/12-CSS3%E5%8F%98%E5%BD%A2%E5%8A%A8%E7%94%BB/</guid><description>基础知识 坐标系统 要使用元素变形操作需要掌握坐标轴，然后通过改变不同坐标来控制元素的变形。
X 轴是水平轴 Y 轴是垂直轴 Z 轴是纵深轴 变形操作 使用 transform 规则控制元素的变形操作，包括控制移动、旋转、倾斜、3D 转换等，下面会详细介绍每一个知识点。
下面是 CSS 提供的变形动作。
选项 说明 none 定义不进行转换。 translate(x,y) 定义 2D 转换。 translate3d(x,y,z) 定义 3D 转换。 translateX(x) 定义转换，只是用 X 轴的值。 translateY(y) 定义转换，只是用 Y 轴的值。 translateZ(z) 定义 3D 转换，只是用 Z 轴的值。 scale(x,y) 定义 2D 缩放转换。 scale3d(x,y,z) 定义 3D 缩放转换。 scaleX(x) 通过设置 X 轴的值来定义缩放转换。 scaleY(y) 通过设置 Y 轴的值来定义缩放转换。 scaleZ(z) 通过设置 Z 轴的值来定义 3D 缩放转换。 rotate(angle) 定义 2D 旋转，在参数中规定角度。 rotate3d(x,y,z,angle) 定义 3D 旋转。 rotateX(angle) 定义沿着 X 轴的 3D 旋转。 rotateY(angle) 定义沿着 Y 轴的 3D 旋转。 rotateZ(angle) 定义沿着 Z 轴的 3D 旋转。 skew(x-angle,y-angle) 定义沿着 X 和 Y 轴的 2D 倾斜转换。 skewX(angle) 定义沿着 X 轴的 2D 倾斜转换。 skewY(angle) 定义沿着 Y 轴的 2D 倾斜转换。 perspective(n) 为 3D 转换元素定义透视视图。 变形叠加 重复设置变形操作时只在原形态上操作。</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/13-CSS3%E8%BF%87%E6%B8%A1%E5%BB%B6%E8%BF%9F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/13-CSS3%E8%BF%87%E6%B8%A1%E5%BB%B6%E8%BF%9F/</guid><description>基础知识 默认情况下 CSS 属性的变化是瞬间完成的（其实也有时间只是毫秒级的，人眼很难感知到），而使用本章节学习的 CSS 过渡可以控制让变化过程平滑。
有关变形动画已经讲的很丰富了，请在 后盾人 (opens new window)查看相应章节。
动画属性 不是所有 css 属性都有过渡效果，查看支持动画的 CSS 属性 (opens new window)，一般来讲有中间值的属性都可以设置动画如宽度、透明度等。
案例分析
下面例子中边框的变化是没有中间值的，所以没有过渡效果。但线宽度是数值类型有中间值所以会有过渡效果。
&amp;lt;style&amp;gt; * { padding: 0; margin: 0; } body { background: #2c3e50; display: flex; flex-direction: column; justify-content: center; align-items: center; box-sizing: border-box; width: 100vw; height: 100vh; padding: 80px; } main { width: 400px; height: 400px; } div { width: 150px; height: 150px; background-color: #fff; border: solid 20px #ddd; transition: 2s; } div:hover { border-radius: 50%; border: dotted 60px #ddd; background-color: #e67e22; } &amp;lt;/style&amp;gt; &amp;lt;main&amp;gt; &amp;lt;div&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/main&amp;gt; 元素状态 初始形态 指当页面加载后的样式状态，下面是表单设置的初始样式。</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/14-CSS3%E5%B8%A7%E5%8A%A8%E7%94%BB/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/14-CSS3%E5%B8%A7%E5%8A%A8%E7%94%BB/</guid><description>基础知识 通过定义一段动画中的关键点、关键状态来创建动画。Keyframes 相比 transition 对动画过程和细节有更强的控制。
过渡动画是两个状态间的变化，帧动画可以处理动画过程中不同时间的细节变化，不过对过渡动画理解后再不习帧动画会非常容易，也可以把帧动画理解为多个帧之间的过渡动画。
关键帧 使用@keyframes 规则配置动画中的各个帧
from 表示起始点 to 表示终点 可以使用百分数如 20%动画运行到 20%时间时 基本使用 下面使用 @keyframes 定义了动画叫 hd 并配置了两个帧动作from/to ，然后在 div 元素中使用animation-name 引用了动画并使用animation-duration声明执行三秒。
动画命名不要使用 CSS 关键字如 none &amp;lt;style&amp;gt; * { padding: 0; margin: 0; } body { background: #2c3e50; display: flex; flex-direction: column; justify-content: center; align-items: center; box-sizing: border-box; width: 100vw; height: 100vh; padding: 80px; } main { width: 400px; height: 400px; } div { width: 150px; height: 150px; background-color: #fff; border: solid 20px #ddd; animation-name: hd; animation-duration: 3s; } @keyframes hd { from { opacity: 0; transform: scale(.</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/15-CSS3%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/15-CSS3%E5%AA%92%E4%BD%93%E6%9F%A5%E8%AF%A2/</guid><description>媒体查询 Media Queries 能在不同的条件下使用不同的样式，使页面在不同在终端设备下达到不同的渲染效果。
viewport 手机是在电脑后出现的，早期网页设置没有考虑到手机的存在。把一个电脑端访问的网页拿到手机上浏览，我们需要告诉手机该怎么做。
我们不能让手机浏览器使用 PC 端的分辨率来展示网页，这会让高分辨率的手机上造成文字过小。
使用 viewport 可以将手机物理分辨率合理转为浏览器分辨率。
viewport 是虚拟窗口，虚拟窗口大于手机的屏幕尺寸。手机端浏览器将网页放在这个大的虚拟窗口中，我们就可以通过拖动屏幕看到网页的其他部分。
但有时需要控制 viewport 虚拟窗口的尺寸或初始的大小，比如希望 viewport 完全和屏幕尺寸一样宽。就需要学习 viewport 的知识了。
媒体设备 下面是常用媒体类型，当然主要使用的还是 screen
选项 说明 all 所有媒体类型 screen 用于电脑屏幕，平板电脑，智能手机等 print 打印设备 speech 应用于屏幕阅读器等发声设备 注：tty, tv, projection, handheld, braille, embossed, aural 设备类型已经被废弃
可以使用 link 与 style 中定义媒体查询 也可以使用 @import url(screen.css) screen 形式媒体使用的样式 可以用逗号分隔同时支持多个媒体设备 未指定媒体设备时等同于 all style 下面是在屏幕显示与打印设备上不同的 CSS 效果
&amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;title&amp;gt;后盾人&amp;lt;/title&amp;gt; &amp;lt;style media=&amp;#34;screen&amp;#34;&amp;gt; h1 { font-size: 3em; color: blue; } &amp;lt;/style&amp;gt; &amp;lt;style media=&amp;#34;print&amp;#34;&amp;gt; h1 { font-size: 8em; color: red; } h2, hr { display: none; } &amp;lt;/style&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;houdunren.</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/16-%E5%93%8D%E5%BA%94%E5%B0%BA%E5%AF%B8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/16-%E5%93%8D%E5%BA%94%E5%B0%BA%E5%AF%B8/</guid><description>响应计算 通过本章的学习来掌握开发中针对不同尺寸设备的响应式处理。
viewport 移动端浏览器将网页放置在虚拟的 viewport 中，不同手机分辨率对视口进行缩放即可全屏显示内容。不同浏览器定义的 viewport 尺寸不同。
视口概念 所以 viewport 也可以理解为屏幕有多少像素来显示内容，这和电脑端是不同的。
电脑端是显示器的多大分辨率多少就用多少像素来显示 移动端是 viewport 分辨率多少就用多少像素来显示 viewport 是可以改变的，就像显示器的分辨率可以改变一样 查看尺寸 主流浏览器的默认 viewport 大小（因为浏览器间不统一，所以也没有必要关注下面的尺寸，只做为了解就行）
浏览器 尺寸 Safari iPhone 980px Opera 850px Android WebKit 800px IE 974px 可以在控制台查看到 viewport 大小
&amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34; /&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; 后盾人十年来我们录制了大量制作精良的课程，并且依然在不段迭代更新中，首先感谢老朋友们十年来的支持，也欢迎新朋友们观看我们的视频教程。 &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 在浏览器打开上面网页，并通过控制台查看结果如下
改变视口 使用&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=2000px&amp;quot; /&amp;gt;可以调整视口，这有点像设置相同尺寸桌面显示不同的分辨率。
下面是将视口定义为 2000 与 300 的差别，这类似于同样 27 寸分辨率下 4K 与 1080 显示的区别。
媒体查询 @media 是根据分辨率来响应式布局的，所以 viewport 尺寸的不同将影响媒体查询的使用。</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/17-%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/17-%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87/</guid><description> 字体图标 网站开发中会使用非常多的小图标，以往使用 png 图来完成，但不方便设置图标颜色、大小等操作。而使用失量的图标字体可以很好的解决这个问题。
常用失量字体
阿里图标库(opens new window) fontawesome(opens new window) 阿里图标 iconfont 提供了丰富的图标库，也允许个人上传分享图标，非常复合中文视觉体验。
首先登录图标库网站 https://www.iconfont.cn(opens new window)
添加图标 然后通过关键词搜索图标，并添加到购物车或收藏夹中
将购物车中的图标添加到项目
使用图标 点击顶部菜单 图标管理&amp;gt;我的项目
首先生成网页 css 代码，然后复制到网页代码中
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;//at.alicdn.com/t/font_3434ycaug24x9.css&amp;#34; /&amp;gt; 在项目中复制代码链接
网站中按以下格式使用
&amp;lt;i class=&amp;#34;iconfont icongongzhonghao&amp;#34;&amp;gt;&amp;lt;/i&amp;gt; fontawesome fontawesome (opens new window)图标库是使用非常多的免费图标库
首先推荐在编辑器中安装插件实现代码提示 在页面中引入链接
&amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css&amp;#34; /&amp;gt; html 中使用方式如下
&amp;lt;i class=&amp;#34;fa fa-user-circle-o&amp;#34; aria-hidden=&amp;#34;true&amp;#34;&amp;gt;&amp;lt;/i&amp;gt;</description></item><item><title/><link>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/18-%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E5%89%8D%E7%AB%AF/%E5%90%8E%E7%9B%BE%E4%BA%BACSS/18-%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</guid><description/></item></channel></rss>