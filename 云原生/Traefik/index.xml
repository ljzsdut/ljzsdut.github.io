<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Traefik on ljzsdut</title><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Traefik/</link><description>Recent content in Traefik on ljzsdut</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Traefik/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Traefik/1-KubernetesCRD-provider%E4%BD%BF%E7%94%A8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Traefik/1-KubernetesCRD-provider%E4%BD%BF%E7%94%A8/</guid><description>IngressRoute IngressRoute is the CRD implementation of a Traefik HTTP router.（可点击查看配置详解）
apiVersion: traefik.containo.us/v1alpha1 kind: IngressRoute metadata: name: foo namespace: bar spec: entryPoints: # 如果未指定，HTTP路由器将接受来自所有定义的入口点的请求。如果要将路由器范围限制为一组入口点，请设置entryPoints选项。 - foo routes: - kind: Rule # 目前kind只有一个取值为&amp;#34;Rule&amp;#34; match: Host(`test.example.com`) priority: 10 # 默认优先级的值等于表示Rule字符串的长度 middlewares: # 多个中间件，按照列表顺序依次应用 - name: middleware1 namespace: default # 定义中间件的名称空间 services: # 可以是TraefikService和Kubernetes service的任意组合 - kind: Service name: foo namespace: default passHostHeader: true port: 80 responseForwarding: flushInterval: 1ms scheme: https #向后端转发时的协议，支持(http/https/h2c)。默认为http协议 serversTransport: transport sticky: cookie: httpOnly: true name: cookie secure: true sameSite: none strategy: RoundRobin weight: 10 tls: secretName: supersecret # 当前ns下的存储证书的secret options: name: opt namespace: default certResolver: foo # 定义证书解析者，在静态配置中定义 domains: - main: example.</description></item><item><title/><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Traefik/2-traefik%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Traefik/2-traefik%E4%BD%BF%E7%94%A8%E6%96%B9%E5%BC%8F/</guid><description> 使用规划 1、acme自动申请通配符证书*.dev.rencaiyoujia.com和*.test.rencaiyoujia.com；生产环境使用自购证书 *.rencaiyoujia.com
2、默认全部开启https访问，http自动跳转https。有特例：只允许http访问。
简单示例 使用ingress-nginx服务发现 参考文档：https://doc.traefik.io/traefik/routing/providers/kubernetes-ingress/#routing-configuration
静态配置 启用ingress服务发现
--providers.kubernetesingress --entrypoints.websecure.http.tls #可选，对websecure这个entrypoint上的所有ingress启用tls ingress配置 annotations: kubernetes.io/ingress.class: traefik traefik.ingress.kubernetes.io/router.entrypoints: websecure traefik.ingress.kubernetes.io/router.tls: &amp;#34;true&amp;#34; #可选，对该ingress启用tls 说明：
1、基于ingress的方式，也是可以使用crd或file方式中定义的middlewares。例如添加注解：
traefik.ingress.kubernetes.io/router.middlewares: auth@file,prefix@kubernetescrd,cb@file
2、nginx-ingress controller是根据ingress.spec.tls来判断是否启用tls，而与nginx不同的是，traefik不会使用，需要明确指定是否启用。启用方式如上面的针对entrypoint全局启用和针对ingress启用。
3、基于第2条，如果从nginx转到traefik，不启用tls，直接是兼容的；如果要启用tls，则需要添加traefik.ingress.kubernetes.io/router.tls: &amp;ldquo;true&amp;quot;注解即可（或添加静态配置--entrypoints.websecure.http.tls）。
使用crd做为服务发现【推荐】 kubectl create secret generic traefik-alidns-secret --from-literal=ALICLOUD_ACCESS_KEY=LTAI4FzFCet4Crbr5EP7JWso --from-literal=ALICLOUD_SECRET_KEY=gTmAhSip0BXl59kwkqZ31IlhpkG3I6 --from-literal=ALICLOUD_REGION_ID=cn-beijing -n kube-system</description></item><item><title/><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Traefik/3-Cert-manager%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Traefik/3-Cert-manager%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/</guid><description>Cert-manager官方文档 官方文档：https://cert-manager.io/docs/
cert-manager支持多种证书签发机构。比如自签证书CA、基于acme协议的letsencrypt的
cert-manager 工作原理 cert-manager 部署到 Kubernetes 集群后，它会 watch 它所支持的 CRD 资源，我们通过创建 CRD 资源来指示 cert-manager 为我们签发证书并自动续期:
解释下几个关键的资源:
Issuer/ClusterIssuer: 用于指示 cert-manager 用什么方式签发证书，本文主要讲解签发免费证书的 ACME 方式。ClusterIssuer 与 Issuer 的唯一区别就是 Issuer 只能用来签发自己所在 namespace 下的证书，ClusterIssuer 可以签发任意 namespace 下的证书。 Certificate: 用于告诉 cert-manager 我们想要什么域名的证书以及签发证书所需要的一些配置，包括对 Issuer/ClusterIssuer 的引用。 一旦在k8s中定义了上述两类资源，部署的cert-manager则会根据Issuer和Certificate生成TLS证书，并将证书保存进k8s的Secret资源中，然后在Ingress资源中就可以引用到这些生成的Secret资源。对于已经生成的证书，还是定期检查证书的有效期，如即将超过有效期，还会自动续期。
免费证书签发原理 Let’s Encrypt 利用 ACME 协议来校验域名是否真的属于你，校验成功后就可以自动颁发免费证书，证书有效期只有 90 天，在到期前需要再校验一次来实现续期，幸运的是 cert-manager 可以自动续期，这样就可以使用永久免费的证书了。如何校验这个域名是否属于你呢？主流的两种校验方式是 HTTP-01 和 DNS-01，详细校验原理可参考 Let&amp;rsquo;s Encrypt 的运作方式，下面将简单描述下。
HTTP-01 校验原理 HTTP-01 的校验原理是给你域名指向的 HTTP 服务增加一个临时 location ，Let’s Encrypt 会发送 http 请求到 http:///.</description></item><item><title>0-traefik基础(基于file-provider)</title><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Traefik/0-traefik%E5%9F%BA%E7%A1%80%E5%9F%BA%E4%BA%8Efile-provider/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Traefik/0-traefik%E5%9F%BA%E7%A1%80%E5%9F%BA%E4%BA%8Efile-provider/</guid><description>零、概述 traefik处理请求的过程 1、请求流量会经过定义的EntryPoints(监听IP和Port)
2、Routers分析流入的请求，判断是否能够匹配一系列的匹配规则(RULES)
3、如果匹配成功，Routers可能会在将requtest转发到应用服务(SERVICES)之前，通过一个或多个Middlewares将requtet进行转换处理。
traefik组件功能 Providers 对运行在各个基础设施上的服务进行服务发现 Entrypoints 监听传入的流量 Routers 分析请求报文 (host, path, headers, SSL, &amp;hellip;) Services 转发请求到应用服务 (load balancing, &amp;hellip;) Middlewares 可能更新请求或根据请求做出相关处理决定 (authentication, rate limiting, headers, &amp;hellip;) 一、服务发现 概述 服务发现是基于各个provider实现的。
常用配置 修改config reload频率：
--providers.providersThrottleDuration=10s 对具有&amp;quot;app=traefik&amp;quot;这个label的CRD进行服务发现
--providers.kubernetescrd.labelselector=&amp;#34;app=traefik&amp;#34; 对特定的名称空间进行服务发现：
--providers.kubernetescrd.namespaces=default,production 处理k8s events的频率：
--providers.kubernetescrd.throttleDuration=10s 二、路由与负载均衡 Traefik除了支持http请求路由。 Traefik还支持TCP请求。要添加TCP路由器和TCP服务。
serversTransport serversTransport：专用于配置Traefik与后端之间的连接所发生的情况。在静态配置中配置为全局参数，也可以在traefik service级别中定义。
## Static configuration --serversTransport.insecureSkipVerify=true #禁用SSL证书验证。 --serversTransport.rootCAs=foo.crt,bar.crt #使用自签名TLS证书时CA证书列表，用于验证自签证书。 --serversTransport.maxIdleConnsPerHost=7 #如果不为零，则控制每个主机的最大空闲连接。 #forwardingTimeouts:将请求转发到后端服务器时有关的超时时间。 --serversTransport.forwardingTimeouts.dialTimeout=1s #DialTimeout是建立与后端服务器的连接所允许的最大持续时间。零表示没有超时。 --serversTransport.forwardingTimeouts.responseHeaderTimeout=1s #转发请求到后端server后，接受到相应header的超时时间 --serversTransport.forwardingTimeouts.idleConnTimeout=1s #空闲连接在保持idle状态的超时时间 EntryPoints EntryPoints是Traefik的网络入口点。它们定义了将接收数据包的IP、端口，以及侦听TCP还是UDP。
配置示例 ## Static configuration --entryPoints.</description></item></channel></rss>