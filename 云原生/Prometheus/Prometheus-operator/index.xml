<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ljzsdut</title><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/</link><description>Recent content on ljzsdut</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/00-Prometheus-operater-%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86%E6%A2%B3%E7%90%86%E6%96%87%E6%A1%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/00-Prometheus-operater-%E7%9B%91%E6%8E%A7%E4%BD%93%E7%B3%BB%E5%8E%9F%E7%90%86%E6%A2%B3%E7%90%86%E6%96%87%E6%A1%A3/</guid><description>一、部署概述 k8s集群：1.18.6，rke部署
监控：prometheus-operator-9.3.1
相关CRD资源介绍及原理 # kubectl get crd |grep coreos alertmanagers.monitoring.coreos.com 2020-08-31T08:53:59Z podmonitors.monitoring.coreos.com 2020-09-08T08:46:07Z prometheuses.monitoring.coreos.com 2020-08-31T08:53:58Z prometheusrules.monitoring.coreos.com 2020-08-31T08:53:58Z servicemonitors.monitoring.coreos.com 2020-08-31T08:53:59Z thanosrulers.monitoring.coreos.com 2020-09-08T08:46:10Z prometheuses：根据此对象，可以自动部署一个Prometheus应用的statefulset alertmanagers：根据此对象，可以自动部署一个Prometheus应用的statefulset servicemonitors：根据此对象，operater会自动生成抓取目标service的配置 podmonitors：根据此对象，operater会自动生成抓取目标pod的配置 prometheusrules：根据此对象，operater会自动生成rule配置 Prometheus对象yaml文件： #kubectl get Prometheus -o yaml apiVersion: v1 items: - apiVersion: monitoring.coreos.com/v1 kind: Prometheus metadata: annotations: meta.helm.sh/release-name: prometheus-operator meta.helm.sh/release-namespace: monitoring project.cattle.io/namespaces: &amp;#39;[&amp;#34;cattle-system&amp;#34;,&amp;#34;kube-node-lease&amp;#34;,&amp;#34;kube-public&amp;#34;,&amp;#34;kube-system&amp;#34;,&amp;#34;monitoring&amp;#34;]&amp;#39; labels: app: prometheus-operator-prometheus app.kubernetes.io/managed-by: Helm chart: prometheus-operator-9.3.1 heritage: Helm release: prometheus-operator name: prometheus-operator-prometheus namespace: monitoring spec: alerting: # AlertmanagerEndpoints配置 # 指明Prometheus向哪个alertmanager发出告警信息 alertmanagers: - apiVersion: v2 name: prometheus-operator-alertmanager #Endpoints对象的名字 namespace: monitoring pathPrefix: / port: web arbitraryFSAccessThroughSMs: {} baseImage: quay.</description></item><item><title/><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/01-alert-rules%E6%95%B4%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/01-alert-rules%E6%95%B4%E7%90%86/</guid><description>文件系统使用率： node_filesystem_free_bytes{mountpoint=~&amp;#34;(/|/u01)&amp;#34;}/node_filesystem_size_bytes{mountpoint=~&amp;#34;(/|/u01)&amp;#34;}*100 Prometheus 参考：https://awesome-prometheus-alerts.grep.to/rules#host-and-hardware
- alert: PrometheusTargetMissing expr: up == 0 for: 5m labels: severity: critical annotations: summary: &amp;#34;Prometheus target missing (instance {{ $labels.instance }})&amp;#34; description: &amp;#34;A Prometheus target has disappeared. An exporter might be crashed.\n VALUE = {{ $value }}\n LABELS: {{ $labels }}&amp;#34; - alert: PrometheusConfigurationReloadFailure expr: prometheus_config_last_reload_successful != 1 for: 5m labels: severity: warning annotations: summary: &amp;#34;Prometheus configuration reload failure (instance {{ $labels.instance }})&amp;#34; description: &amp;#34;Prometheus configuration reload error\n VALUE = {{ $value }}\n LABELS: {{ $labels }}&amp;#34; - alert: PrometheusTooManyRestarts expr: changes(process_start_time_seconds{job=~&amp;#34;expose-prometheus-metrics|pushgateway|expose-alertmanager-metrics&amp;#34;}[15m]) &amp;gt; 2 for: 5m labels: severity: warning annotations: summary: &amp;#34;Prometheus too many restarts (instance {{ $labels.</description></item><item><title/><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/02-dingtalk-webhook%E9%83%A8%E7%BD%B2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/02-dingtalk-webhook%E9%83%A8%E7%BD%B2/</guid><description>部署deployment：
--- apiVersion: v1 kind: ConfigMap metadata: name: dingtalk-config namespace: monitoring data: config.yml: |- templates: # 自定义模板路径 - /etc/dingtalk/default.tmpl targets: webhook1: url: https://oapi.dingtalk.com/robot/send?access_token=a759ccff30f90a10be625fcef8bc03afff499cc3b2159b98a579fe315968f0ca default.tmpl: |- {{ define &amp;#34;__subject&amp;#34; }}[{{ .Status | toUpper }}{{ if eq .Status &amp;#34;firing&amp;#34; }}:{{ .Alerts.Firing | len }}{{ end }}] {{ .GroupLabels.SortedPairs.Values | join &amp;#34; &amp;#34; }} {{ if gt (len .CommonLabels) (len .GroupLabels) }}({{ with .CommonLabels.Remove .GroupLabels.Names }}{{ .Values | join &amp;#34; &amp;#34; }}{{ end }}){{ end }}{{ end }} {{ define &amp;#34;__alertmanagerURL&amp;#34; }}{{ .</description></item><item><title/><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/03-golang%E5%BC%80%E5%8F%91%E9%92%89%E9%92%89web-server%E4%BA%86%E8%A7%A3%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5%E7%9A%84%E5%8E%9F%E7%90%86/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/03-golang%E5%BC%80%E5%8F%91%E9%92%89%E9%92%89web-server%E4%BA%86%E8%A7%A3%E9%92%89%E9%92%89%E9%80%9A%E7%9F%A5%E7%9A%84%E5%8E%9F%E7%90%86/</guid><description>使用Webhook扩展Alertmanager 在某些情况下除了Alertmanager已经内置的集中告警通知方式以外，对于不同的用户和组织而言还需要一些自定义的告知方式支持。通过Alertmanager提供的webhook支持可以轻松实现这一类的扩展。除了用于支持额外的通知方式，webhook还可以与其他第三方系统集成实现运维自动化，或者弹性伸缩等。
在Alertmanager中可以使用如下配置定义基于webhook的告警接收器receiver。一个receiver可以对应一组webhook配置。
name: &amp;lt;string&amp;gt; webhook_configs: [ - &amp;lt;webhook_config&amp;gt;, ... ] 每一项webhook_config的具体配置格式如下：
# Whether or not to notify about resolved alerts. [ send_resolved: &amp;lt;boolean&amp;gt; | default = true ] # The endpoint to send HTTP POST requests to. url: &amp;lt;string&amp;gt; # The HTTP client&amp;#39;s configuration. [ http_config: &amp;lt;http_config&amp;gt; | default = global.http_config ] send_resolved用于指定是否在告警消除时发送回执消息。
url则是用于接收webhook请求的地址。
http_configs则是在需要对请求进行SSL配置时使用。
当用户定义webhook用于接收告警信息后，当告警被触发时，Alertmanager会按照以下格式向这些url地址发送HTTP Post请求，请求内容如下：
{ &amp;#34;version&amp;#34;: &amp;#34;4&amp;#34;, &amp;#34;groupKey&amp;#34;: &amp;lt;string&amp;gt;, // key identifying the group of alerts (e.</description></item><item><title/><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/04-Prometheus-Operator-%E7%9B%91%E6%8E%A7%E5%A4%96%E7%BD%AEETCD%E9%9B%86%E7%BE%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/04-Prometheus-Operator-%E7%9B%91%E6%8E%A7%E5%A4%96%E7%BD%AEETCD%E9%9B%86%E7%BE%A4/</guid><description>Prometheus Operator 监控外置ETCD集群 现在我们需要自定义Prometheus operator，这里以监控ETCD为例。由于我们的etcd是跑在kubernetes外部的，想要监控到，本文章主要介绍k8s二进制安装监控etcd，由于是二进制安装我们需要手动的创建Endpoints以及Service。
除了prometheus operator自带的资源对象，节点以及组件监控，有的时候实际的业务场景需要我们自定义监控项
确保有metric数据 创建ServiceMonitor对象，用于添加Prometheus添加监控项 ServiceMonitor关联metrics数据接口的一个Service对象 确保Service可以正确获取到metrics 本次的环境我这里采用Kubernetes二进制安装环境进行演示
Kubernetes 1.14 二进制集群安装 本系列文档将介绍如何使用二进制部署Kubernetes v1.14集群的所有部署，而不是使用自动化部署(kubeadm)集群。在部署过程中，将详细列出各个组件启动参数，以及相关配置说明。在学习完本文档后，将理解k8s各个组件的交互原理，并且可以快速解决实际问题。
9311380
Prometheus operator安装可以参考下面的文章
Prometheus Operator 监控k8s组件 默认情况下，prometheus operator已经可以监控我们的集群，但是无法监控kube-controller-manager和kube-scheduler。 这里我们将这2个组件进行监控，并将prometheus和grafana添加traefik。通过ingress进行访问
21237
获取ETCD证书 对于etcd集群，在搭建的时候我们就采用了https证书认证的方式，所以这里如果想用Prometheus访问到etcd集群的监控数据，就需要添加证书
我们可以通过systemctl status etcd查看证书路径
[root@k8s-01 ~]# systemctl status etcd ● etcd.service - Etcd Server Loaded: loaded (/etc/systemd/system/etcd.service; ##文件路径 Active: active (running) since 一 2020-03-09 09:47:45 CST; 8h ago Docs: https://github.com/coreos Main PID: 1055 (etcd) Tasks: 9 Memory: 145.5M CGroup: /system.slice/etcd.service └─1055 /opt/k8s/bin/etcd --data-dir=/data/k8s/etcd/data --wal-dir=.</description></item><item><title/><link>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E4%BA%91%E5%8E%9F%E7%94%9F/Prometheus/Prometheus-operator/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/</guid><description>https://www.bookstack.cn/read/prometheus-book/README.md
https://www.k8stech.net/tags/prometheus/
https://www.prometheus.wang/
https://www.qikqiak.com/?utm_source=course
https://i4t.com/4528.html</description></item></channel></rss>