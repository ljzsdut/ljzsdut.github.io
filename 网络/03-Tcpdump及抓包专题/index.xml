<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ljzsdut</title><link>https://note.ljzsdut.com/%E7%BD%91%E7%BB%9C/03-Tcpdump%E5%8F%8A%E6%8A%93%E5%8C%85%E4%B8%93%E9%A2%98/</link><description>Recent content on ljzsdut</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://note.ljzsdut.com/%E7%BD%91%E7%BB%9C/03-Tcpdump%E5%8F%8A%E6%8A%93%E5%8C%85%E4%B8%93%E9%A2%98/index.xml" rel="self" type="application/rss+xml"/><item><title/><link>https://note.ljzsdut.com/%E7%BD%91%E7%BB%9C/03-Tcpdump%E5%8F%8A%E6%8A%93%E5%8C%85%E4%B8%93%E9%A2%98/02-tcpdump%E9%AB%98%E7%BA%A7%E8%BF%87%E6%BB%A4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E7%BD%91%E7%BB%9C/03-Tcpdump%E5%8F%8A%E6%8A%93%E5%8C%85%E4%B8%93%E9%A2%98/02-tcpdump%E9%AB%98%E7%BA%A7%E8%BF%87%E6%BB%A4/</guid><description>理论 OSI七层参考模型 链路层Header 参考链接：http://blog.chinaunix.net/uid-20530497-id-2878069.html
Ethernet帧 以太帧有好多种，我们最常用到的是Ethernet II，Ethernet II即DIX 2.0：Xerox与DEC、Intel在1982年制定的以太网标准帧格式。Cisco名称为：ARPA。
Ethernet II类型以太网帧的最小长度为64字节（6＋6＋2＋46＋4），最大长度为1518字节（6＋6＋2＋1500＋4）。
其中前12字节分别标识出发送数据帧的源节点MAC地址和接收数据帧的目标节点MAC地址。（注：ISL封装后可达1548字节，802.1Q封装后可达1522字节）
接下来的2个字节标识出以太网帧所携带的上层数据类型，如下：
类型 值 IPv4 0x0800 ARP 0x0806 PPPoE 0x8864 802.1Q tag 0x8100 IPV6 0x86DD MPLS Label 0x8847 在不定长的数据字段后是4个字节的帧校验序列（Frame. Check Sequence，FCS）
ARP帧 硬件类型：1 表示以太网
协议类型：和Ethernet数据帧中类型字段相同
OP操作字段：
OP值 操作类型 1 表示ARP请求 2 表示ARP应答 3 表示RARP请求 4 表示RARP应答 802.1q VLAN数据帧(4字节) Type：长度为2字节，取值为0x8100，表示此帧的类型为802.1Q Tag帧。 PRI：长度为3比特，可取0～7之间的值，表示帧的优先级，值越大优先级越高。该优先级主要为QoS差分服务提供参考依据（COS）。 VLAN Identifier (VID) : 长度12bits，可配置的VLAN ID取值范围为1～4094。通常vlan 0和vlan 4095预留，vlan1为缺省vlan，一般用于网管。 IPv4 Header 参考：
https://blog.csdn.net/lqrensn/article/details/5134408
http://blog.itpub.net/15480802/viewspace-1334334/
名称 作用说明 IP Version 4 bits , 一般的值为0100（IPv4），IPv6的值（0110）。总共有2^4 变化， 可以表示的数值 0~15 ， 因此 IP Version最多可以标识 16种版本 ，ipv4 版本中 IP Version 的值为4，ipv6版本中 IP Version的值为6 ， 已经被使用的版本：0,1,2,3,4,5,6,7,8 ,9 ， 因此 下一个IP版本应该是IPv10 IHL(Internet Header Length) 4bits ，总共有2^4 变化， 可以表示的数值 0~15， 该字段用于声明IPv4包的Header长度，以4字节(32bit)为单位，因为在IP包头中有变长的可选Options部分。该字段值有个范围： 5~15。IHL = 5： 表示无Options字段 ，即Header长度为20Bytes；IHL=15：表示含Options字段， 且Options字段长度为最大长度，是40Bytes ，因此IPV4包的Header长度最大也就60Bytes。所以只要带有Options字段，那么IHL字段的值一般都大于5。</description></item><item><title/><link>https://note.ljzsdut.com/%E7%BD%91%E7%BB%9C/03-Tcpdump%E5%8F%8A%E6%8A%93%E5%8C%85%E4%B8%93%E9%A2%98/03-Wireshark%E8%AE%BE%E7%BD%AE%E8%A7%A3%E6%9E%90%E5%B1%95%E7%A4%BAVxlan%E5%8D%8F%E8%AE%AE/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E7%BD%91%E7%BB%9C/03-Tcpdump%E5%8F%8A%E6%8A%93%E5%8C%85%E4%B8%93%E9%A2%98/03-Wireshark%E8%AE%BE%E7%BD%AE%E8%A7%A3%E6%9E%90%E5%B1%95%E7%A4%BAVxlan%E5%8D%8F%E8%AE%AE/</guid><description>转载
问题/需求，前提说明 默认情况下Wireshark认为udp 4789端口对应的数据 为Vxlan协议数据包.
而Linux内核默认的处理vxlan的协议端口为UDP 8472端口，因此在抓包使用wireshark统计观察分析Linux系统下的数据时，不能默认直接解析vxlan协议，而是直接将vxlan协议的数据作为UDP的数据块，可读性不高，因此需要客户化设置将UDP 8472 端口与Vxlan协议对应起来，以便wireshark软件解析协议.
如下图:
查看wireshark支持的协议 以及 enabled protocol Internals -&amp;gt; Supported Protocols(slow!)-&amp;gt;查看对话框中是否有vxlan协议，有的话说明此版本的wireshark已经支持解析vxlan协议,否则不支持，请更新wireshark版本.
查看enabled protocol,确保vxlan protocol处于enabled状态. Analyze -&amp;gt;Enabled Protocols-&amp;gt;Vxlan 调整Wireshark配置，让8472端口的数据包解析为vxlan协议. 选中 udp 端口8472 的数据包 -&amp;gt; decode as -&amp;gt; UDP (destination 8472) decode as -&amp;gt; VXLAN
或者 选中 udp 端口8472 的数据包 -&amp;gt; (菜单栏) Analyze-&amp;gt;Decode as -&amp;gt; UDP (destination 8472) decode as -&amp;gt; VXLAN
正确解析后数据如下图
说明：
1 其他类似的协议可以类推。
2 文档中介绍的方式只是临时起效，Wireshark软件重启后，配置丢失，应该可以设置用户个性化配置永久保存。
3 参考配置连接 https://www.wireshark.org/docs/wsug_html_chunked/ChCustProtocolDissectionSection.html
———————————————— 版权声明：本文为CSDN博主「AvalonZST」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。 原文链接：https://blog.</description></item><item><title/><link>https://note.ljzsdut.com/%E7%BD%91%E7%BB%9C/03-Tcpdump%E5%8F%8A%E6%8A%93%E5%8C%85%E4%B8%93%E9%A2%98/04-tshark/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E7%BD%91%E7%BB%9C/03-Tcpdump%E5%8F%8A%E6%8A%93%E5%8C%85%E4%B8%93%E9%A2%98/04-tshark/</guid><description>https://blog.csdn.net/chen8238065/article/details/53714514
https://www.cnblogs.com/classics/p/10417419.html 1、 a、解析dhcp抓包文件 -r 读抓好的数据包文件 tshark -r 数据包路径 -Y 过滤条件 基本上可以运用 wirshark上的过滤条件 查找中继后dhcp discover src ip 报文 tshark -r E:\testpacket\testdhcp.pcapng -Y &amp;#34;bootp &amp;amp;&amp;amp; ip.src == 192.168.108.1 &amp;amp;&amp;amp; bootp.option.dhcp == 1&amp;#34; 查看dhcp discover srcmac 报文 tshark -r E:\testpacket\testdhcp.pcapng -Y &amp;#34;bootp &amp;amp;&amp;amp; bootp.hw.mac_addr == 00:0c:29:b7:56:f3 &amp;amp;&amp;amp; bootp.option.dhcp == 1&amp;#34; 查看dhcp offer 报文 tshark -r E:\testpacket\testdhcp.pcapng -Y &amp;#34;bootp &amp;amp;&amp;amp; ip.src == 192.168.111.1 &amp;amp;&amp;amp; bootp.hw.mac_addr == 00:0c:29:b7:56:f3 &amp;amp;&amp;amp; bootp.option.dhcp == 2&amp;#34; 查看dhcp request报文 tshark -r E:\testpacket\testdhcp.</description></item><item><title>01-tcmpdump初级使用</title><link>https://note.ljzsdut.com/%E7%BD%91%E7%BB%9C/03-Tcpdump%E5%8F%8A%E6%8A%93%E5%8C%85%E4%B8%93%E9%A2%98/01-tcpdump%E5%88%9D%E7%BA%A7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://note.ljzsdut.com/%E7%BD%91%E7%BB%9C/03-Tcpdump%E5%8F%8A%E6%8A%93%E5%8C%85%E4%B8%93%E9%A2%98/01-tcpdump%E5%88%9D%E7%BA%A7/</guid><description>概述 tcpdump可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。当然也可以将完整的抓取报文保存为文件，使用wireshark进行更加深入的分析。
命令介绍 语法 tcpdump [ -nn ] [ -c count ] [ -i interface ] [ -w file ] [ -s snaplen ] [-v|vv|vvv] [ expression ] 常用的组合： tcpdump -env -i interface 参数 -nn：将主机地址显示为ip，服务名显示为port -i：指定网卡设备interface，表示通过哪一个网卡抓包。一般有eth0，lo（回环接口），any（任意一块网卡）。默认为第一块网卡。如果想知道可以通过哪几个网卡抓包，可以使用tcpdump –D查看。 -X：以十六进制和ASCII两种方式显示报文头部和内容 -A：仅以ASCII码的形式显示报文头和内容 -w：将抓取的包内容存储成文件（二进制），使用tcpdump -r /var/tcp.cap查看或使用wireshark，例如：tcpdump -nn -i eth0 -s 0 host 192.168.5.242 and port 9001 -w /tmp/242.cap。 -r：读取包文件，可以结合过滤器对抓包数据分析。例如tcpdump –r google.cap http，这句命令的意思是让tcpdump读取google.cap文件，把其中http协议的数据包都给过滤出来。 -c：指定抓包数量count -s snaplen：设置捕获数据包的长度，抓取数据包时，默认抓取长度为68字节。加上-s 0后可以抓到完整的数据包 过滤器（BPF语言） 关键字 tcpdump除了使用参数，还可以使用关键字。从最简单的开始，过滤器(BPF语言)主要由一个限定词和标志(可以理解为限定词的参数)组成，限定词（关键字）有三种：
类型关键字 第一种是关于类型的关键字，主要包括host，net，port，portrange :
host, 定义抓取哪个IP地址（也可以给它mac地址，格式是00:00:00:00:00:00）的数据包，比如我想抓有关192.</description></item></channel></rss>